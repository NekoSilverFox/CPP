// 冒泡排序
void BubbleSort(int arr[], int length)
{
	for (int i = 0; i < length; i++)
	{
		for (int j = 0; j < length - i - 1; j++)
		{

			if (arr[j] > arr[j + 1])
			{
				int temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}

		}

	}
}



// 选择排序 - 选择排序通过内层循环找到最小值的###下标###，内层循环结束后才会交换数据
void SelectSort(int arr[], int length)
{
	int min;
	int temp;
	for (int i = 0; i < length; i++)
	{
		min = i;
		for (int j = i + 1; j < length; j++)
		{
			if (arr[j] < arr[min]) min = j;
		}

		if (min != i)
		{
			temp = arr[i];
			arr[i] = arr[min];
			arr[min] = temp;
		}

	}
}



void InsertSort(int arr[], int length)
{
	int j;
	for (int i = 1; i < length; i++)
	{

		if (arr[i] < arr[i - 1])
		{
			int temp = arr[i];
			for (j = i - 1; j >= 0 && temp < arr[j]; j--)
			{
				arr[j + 1] = arr[j]; //最后会留出一个空，这个空就是 arr[j + 1] !!!!
			}
			arr[j + 1] = temp;
		}

	}
}


void ShellSort(int arr[], int length) {

	int increasement = length;
	int i, j, k;

	do 
	{
		//确定分组的增量
		increasement = increasement / 3 + 1;
		for (i = 0; i < increasement; i++) {

			for (j = i + increasement; j < length; j += increasement) {

				if (arr[j] < arr[j - increasement]) {

					int temp = arr[j];
					for (k = j - increasement; k >= 0 && temp < arr[k]; k -= increasement) {
						arr[k + increasement] = arr[k];
					}
					arr[k + increasement] = temp;

				}

			}

		}
	} while (increasement > 1);
}